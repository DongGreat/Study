챕터 1

4
3

3
4
2 기능 테스트는 성능 특성 분석의 기법이 아님
4
4

3
4
3
4
2

4
1
4
3
4
3
3
2

4
3 2 UML의 기본 구성요소 Things, Relationship, Diagram
1
1
3
1 3 동적 모델링에 활용되는 다이어그램 유스케이스, 시퀀스, 커뮤니케이션, 상태, 활동, 타이밍
2

4 2 린 개발방법론 7가지 원칙 낭비제거, 품질 내재화, 지식 창출, 늦은 확정, 빠른 인도, 사람 존중, 전체 최적화
1
2 4 XP의 5가지 가치 용기, 단순성, 의사소통, 피드백, 존중
3
2
3 4 UML의 특징 가시화, 구축, 명세화, 문서화
1 2 요구사항은 우선순위가 동등하지 않음
3
2 4 객체 간 상호작용을 보여주는 기법은 시퀀스 다이어그램
4

3 1 CASE는 프로그램의 구현과 유지보수 작업만을 중심으로 하는 것이 아님
4
3
3
4

4
1 3 이클립스는 IDE로 요구사항 관리 도구가 아님
4
4 2 개념 모델링은 대부분 UML로 구성
3 1 요구사항 분석 -> 개념 모델링 -> 논리 모델링 -> 물리 모델링

2
3
4

4 3 직관적 사용자 반응 기반 인터페이스를 특징으로 하는 UI 유형은 NUI
4
1
3
3 4 서버 메시지 및 예외처리 정의는 UI 패턴 모델을 정의할 때 필요로 하는 요소

2 3 와이어 프레임 작성은 사용자 요구사항을 구체화하는 단계에서의 활동 내용
4
2 1 서비스 구축을 위한 대부분 정보가 수록된 문서는 스토리보드
1 2 페르소나 정의는 UI 컨셉션 단계 이전에 미리 수행해야 하는 활동

1 3 문제 정의 -> 사용자 모델 정의 -> 작업 분석 -> 컴퓨터 오브젝트 및 기능 정의 -> 사용자 인터페이스 정의 -> 디자인 평가
3 2 기능 작성 -> 입력 요소 확인 -> 유스케이스 설계 -> 기능 및 양식 확인
1
3
1 2 개인의 연령, 성별 등 개별적 특성은 2류 접근 방법

4
3 인간의 감성을 표현하는 어휘를 이용은 1류 접근 방법
4 프로토타이핑 도구는 액슈어
3 커피 스크립트는 프레이머

1
2
3
2

1
3
3
4
1
3
3
2
2

3 뷰는 서로 관련 있는 관심사들의 집합이라는 관점에서 전체 시스템을 표현
3 4 4+1뷰는 유스케이스, 논리, 프로세스, 구현, 배포 / 클래스 뷰는 없음
1 2 ATAM은 품질 속성 평가
4

4
4
1
3
1

3
2
1
3
4
3
4
4
3 2 공통 성질을 추출하여 클래스를 설정하는 기법은 추상화

4
4
1
3
1
2
2
2

1
4
4
4
1
1
2
3
3

4
4

3
3 4 FTR은 논쟁이나 반박을 제한한다
2
2

3 2 기능 및 비기능 요구사항 분류는 요구사항 식별 및 분류를 위한 활동
4
4 3 기능적 요구사항 기능성, 완전성, 일관성
4 비기능적 요구사항 신뢰성, 사용성, 효율성, 유지 보수성, 이식성
4 2 요구사항 도출 -> 요구사항 분석 -> 요구사항 명세 -> 요구사항 확인 및 검증

3
2 3 인스펙션은 전문가 또는 팀이 검사하여 오류를 찾아냄
2 4 역공학을 통해서 요구사항을 검증하지는 않음
3

4 1 시스템 구조, 행위, 동작 원리를 설명하는 프레임워크는 시스템 아키텍처
4 2 비휘발성 자원의 모임이 필요한 것은 라이브러리에 대한 요구사항
4
4
2 1-Tier 아키텍처는 OLTP 업무에 적합하지 않음
1 3  대용량 온라인 트랜잭션 처리 업무는 3-Tier 아키텍처
4 3  데이터 표준 공통부, 개발부, 종료부

3
2
3

1 2 직접 연계방식은 결합도가 높아서 변경에 민감
4
1 3 LOD는 데이터 상호 간에 의미적으로 연결시켜 거대한 DB처럼 활용
2 3 실시간 동기는 Request-Replay 하는 통신 방식
1 4 개체 정의서에 테이블 볼륨은 없음
4 2 연계 서버 오류는 연계 서버의 기능과 관련된 오류
3
4 3 이기종 시스템과의 연결을 지원하는 미들웨어 솔루션은 WAS
1 2 개방형 표준인 Web Service를 이용하는 건 ESB

1 3 2~4주의 짧은 개발 반복은 스프린트
2
3
3
2
4 2 화면 단위의 레이아웃을 설계하는 작업은 와이어 프레임
4
4
2
4
2 3 객체에 명령을 내리는 메시지는 메서드
3
1
4
2
1
3
3 1 DB 커넥션 풀을 생성하면 DB 연결 기술
2 다른 작업을 하다가 데이터가 준비되었다는 신호를 받으면 처리하는 방식은 실시간 비동기 통신 방식
3


챕터 2

3
4
1
1
2

1 3 n(n-1) 방향 그래프
1
2
1
2
4
1
3

1
2

1
4

1 2 UID를 기본 키로 변환해야 한다
4
3
2
2 3 객체를 관계형 데이터베이스로 변환하여 테이브를 구성하는 데 활용하는 건 객체-관계 매핑(ORM)

2 4 PL/SQL의 장점으로 함수형 언어 사용은 없음
4 3 PL/SQL의 저장형 객체로 이벤트는 없음
1
4
3 2 DBMS_OUTPUT.EXECUTE는 없음

3 1 프로시저 코드를 보면서 성능 문제점을 개선해 나가는 활동은 소스 코드 인스펙션
3 2 인스펙션의 대상으로 옳지 않은 것은 재사용 서브쿼리
2 1 APM 등을 활용하는 건 문제 있는 SQL 식별
4 1 문제 있는 SQL 식별 -> 옵티마이저 통계 확인 -> SQL 문 재구성 -> 인덱스 재구성 -> 실행계획 유지 관리

4

1
2
1 3 단위 모듈 구현 원리로 데이터 의존성은 없음

3
2
4
1

3
4 3 Redmine은 협업 도구
4 트렐로, 레드마인, 지라는 프로젝트 관리 도구
4 2 CVS는 형상 관리 도구
2

3
4
3
2
3

2
3
1 4 신규 개발 소스 및 컴파일 결과물 준비는 빌드 진행 단계
2

1 3 키 관리에는 XrML, MPEG-21이 있지 않음
3
1 EAI 연동이 아닌 DRM 연동을 고려
4

3
2
2 4 자원의 양에 따라 요구된 성능은 효율성
3
1 3 시간반응성, 자원효율성, 준수성은 효율성
3

3
4 3 개발좌 관점에서 고려해야 할 항목으로 사용성은 없음
1
3
4

1
2
4 14598은 국제 제품 품질 표준
4
3 CMMi는 프로세스 영역, 목표, 실행, 공통특징으로 구성

3
3
4

2
1 3 속도에 중점은 Git
3 4 버전 관리 도구 활용은 하나의 솔루션을 기반으로 여러 버전의 제품을 개발할 경우
1 2 UI 사용성 테스트 및 코딩 자동화 기능은 빌드 자동화 도구 기능이 아님
2 4 소스 코드 자체로 품질을 판단할 수 있는 도구는 인스펙션 도구

3
3
3
1
2
4

3
4
1

3
1 4 테스트가 필요한 상황을 작성한 문서는 테스트 시나리오
4 2 단위 테스트를 통과한 컴포넌트 간의 인터페이스를 테스트하는 단계는 통합 테스트 단계
1 2 동일한 테스트 케이스에 의한 반복적 테스트는 새로운 버그를 찾지 못한다는 건 살충제 패러독스
4

4 3 하향식 통합 테스트는 검사 초기에 시스템의 구조가 파악되어야 함
4
1
1

2 3 결정 커버리지는 전체 조건식이 최소한 참/거짓
1 2 치명적 > 주요 > 보통 > 경미한 > 단순
4 3 테스트 수행 후 발견된 결함에 대해 필수적으로 등록해야 하는 항목에 테스트 케이스는 없음
4
4

2
3
4
4
1 3

4
4
2
2
3

3
2

1
4
2 4 거품 정렬, 삽입 정렬, 선택 정렬은 O(n^2)
3 4 pmd, cppcheckm sonarQube는 정적 분석 도구
3 4 널을 전달하거나 반환하지 말고 널 체크 코드 작성은 오류 처리

3
4
4

2 3 인터페이스 기능 확인 방법으로 와이어 프레임을 통해 인터페이스 기능을 확인하는 것은 옳지 않음
4
3 서로 다른 플랫폼 및 애플리케이션들 간을 하나의 시스템으로 관리 운영은 ESB
4 1 송수신 시스템 간 데이터 매핑 방법은 송신 시스템 코드를 수신 시스템 코드로 매핑, 송수신 시스템 코드 통합 후 매핑

2
4

3 4 시큐어 코딩 가이드의 적용 대상으로 Agent 오용은 없음
2
3 4 DES는 낮은 보안성
3 데이터베이스 암호화 기법에 Agent 방식은 없음
1 DES 암호화 알고리즘은 낮은 보안성

2
1

2 4 watir은 Ruby 기반 웹 애플리케이션 테스트 프레임워크
3 Fitnesse는 자동으로 원하는 값에 대한 테스트

1
3
4
2 3 미리 정해진 그룹핑 기준에 따라 분할하는 파티셔닝은 리스트 파티셔닝
4
2 3 테스트 자동화 도구의 장점으로 도구 구입 후 별도의 학습이 불필요하다는 것은 없음
3 테스트 스텁은 하위 모듈이 없는 경우 사용

3
2
2 XrML, MPEG-21은 저작권 표현에 사용되는 구성요소
4 3 다양한 어플리케이션 간의 연결과 상호작용을 지원하는 인터페이스 기술은 ESB

2 1 애플리케이션 서버에 암, 복호화, 정책 관리, 키 관리 등의 부하 발생은 API 방식
3
2 4 15504는 프로세스 품질 표준
4 1 참 오라클은 모든 입력값에 대해 기대하는 결과를 생성
4 요구사항을 충족시켜주지 못한다면, 결함이 없다고 해도 품질이 높다고 볼 수 없다는 건 오류-부재의 궤변

3 테스트 슈트는 테스트 케이스의 집합
1 2 어떤 문제를 풀기 위해 그 문제를 더 작은 문제의 연장선으로 생각하는 건 동적 계획법
3
1


챕터 3

